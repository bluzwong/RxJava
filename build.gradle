buildscript {
  repositories { jcenter() }
  dependencies { 
    classpath 'com.netflix.nebula:gradle-rxjava-project-plugin:4.0.0' 
    classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.1.0'
  }
}

group = 'io.reactivex.rxjava2'

description = 'RxJava: Reactive Extensions for the JVM â€“ a library for composing asynchronous and event-based programs using observable sequences for the Java VM.'

apply plugin: 'java'
// apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'nebula.rxjava-project'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    signature 'org.codehaus.mojo.signature:java16:1.1@signature'

    compile 'org.reactivestreams:reactive-streams:1.0.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    perfCompile 'org.openjdk.jmh:jmh-core:1.11.3'
    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.3'
}

javadoc {
    exclude "**/rx/internal/**"
    exclude "**/test/**"
    exclude "**/perf/**"
    options {
        windowTitle = "RxJava Javadoc ${project.version}"
    }
    // Clear the following options to make the docs consistent with the old format
    options.addStringOption('top').value = ''
    options.addStringOption('doctitle').value = ''
    options.addStringOption('header').value = ''
    if (JavaVersion.current().isJava7()) {
        // "./gradle/stylesheet.css" only supports Java 7
        options.addStringOption('stylesheetfile', rootProject.file('./gradle/stylesheet.css').toString())
    }
}

animalsniffer {
    annotation = 'io.reactivex.internal.util.SuppressAnimalSniffer'
}

// support for snapshot/final releases with the various branches RxJava uses
nebulaRelease {
    addReleaseBranchPattern(/\d+\.\d+\.\d+/)
    addReleaseBranchPattern('HEAD')
}

if (project.hasProperty('release.useLastTag')) {
    tasks.prepare.enabled = false
}

test {
    maxHeapSize = "1200m"

    if (System.getenv('CI') == null) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

jacoco {
    toolVersion = '0.7.7.201606060606' // See http://www.eclemma.org/jacoco/.
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

build.dependsOn jacocoTestReport

// pmd {
//     toolVersion = '5.4.2'
//     ignoreFailures = true
//     sourceSets = [sourceSets.main]
//     ruleSets = []
//     ruleSetFiles = files('pmd.xml')
// }

// pmdMain {
//     reports {
//         html.enabled = true
//         xml.enabled = true
//     }
// }

// build.dependsOn pmdMain

// task pmdPrint(dependsOn: 'pmdMain') << {
//     File file = new File('build/reports/pmd/main.xml')
//     if (file.exists()) {

//         println("Listing first 100 PMD violations")

//         file.eachLine { line, count ->
//             if (count <= 100) {
//                println(line)
//             }
//         }

//     } else {
//         println("PMD file not found.")
//     }
// }

// build.dependsOn pmdPrint

findbugs {
    ignoreFailures true
    toolVersion = '3.0.1'
    effort = 'max'
    reportLevel = 'low'
    sourceSets = [sourceSets.main]
}

findbugsMain {
    reports {
        html.enabled = false // Findbugs can only have on report enabled
        xml.enabled = true
    }
}

